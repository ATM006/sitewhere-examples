<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:sw="http://www.sitewhere.com/schema/sitewhere/ce"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
           http://www.sitewhere.com/schema/sitewhere/ce http://www.sitewhere.org/schema/sitewhere/ce/1.0.2/sitewhere.xsd?a=5s">
           
	<!-- Load property values for substitution -->
	<context:property-placeholder location="file:${catalina.home}/conf/sitewhere/sitewhere.properties"
		ignore-resource-not-found="true"/>
	
	<!-- ########################### -->
	<!-- # SITEWHERE CONFIGURATION # -->
	<!-- ########################### -->
	<sw:configuration>

		<!-- ################################# -->
		<!-- # GLOBAL SERVICES CONFIGURATION # -->
		<!-- ################################# -->
		<sw:globals>
			<sw:hazelcast-configuration configFileLocation="${catalina.home}/conf/sitewhere/hazelcast.xml"/>
			<sw:solr-configuration solrServerUrl="http://localhost:8983/solr/SiteWhere"/>
			<sw:groovy-configuration debug="true" verbose="true"/>
		</sw:globals>
		
		<!-- ########################### -->
		<!-- # DATASTORE CONFIGURATION # -->
		<!-- ########################### -->
		<sw:datastore>
		
			<!-- Default MongoDB Datastore -->
			<sw:mongo-datastore hostname="localhost" port="27017" databaseName="sitewhere"/>
		
			<!-- Default HBase Datastore -->
			<!--  
			<sw:hbase-datastore quorum="sandbox.hortonworks.com" zookeeperZnodeParent="/hbase-unsecure"/>
			-->
			
			<!-- Improves performance by using Hazelcast for distributed caching -->
			<sw:hazelcast-cache/>
			
			<!-- Initializes device model with sample data if datastore is empty -->
			<sw:default-device-model-initializer/>
			
			<!-- Initializes user model with sample data if datastore is empty -->
			<sw:default-user-model-initializer/>

		</sw:datastore>
		
		<!-- ####################### -->
		<!-- # DEVICE PROVISIONING # -->
		<!-- ####################### -->
		<sw:provisioning>
		
			<!-- Inbound event sources -->
			<sw:event-sources>
				
				<!-- Event source for Stomp messages over ActiveMQ queue -->
				<sw:activemq-event-source sourceId="stomp"
					transportUri="stomp://localhost:2345?trace=true" queueName="SITEWHERE.STOMP"
					numConsumers="10" dataDirectory="${catalina.home}/stompdata">
					<sw:json-event-decoder/>
				</sw:activemq-event-source>

			</sw:event-sources>
		
			<!-- Inbound Processing Strategy -->
			<sw:inbound-processing-strategy>
				<sw:default-inbound-processing-strategy
					numEventProcessorThreads="50" enableMonitoring="false" monitoringIntervalSec="3"/>
			</sw:inbound-processing-strategy>
			
			<!-- Device registration -->
			<sw:registration>
				<sw:default-registration-manager allowNewDevices="true"/>
			</sw:registration>
			
			<!-- Batch operation management -->
			<sw:batch-operations>
				<sw:default-batch-operation-manager
					throttleDelayMs="10000"/>
			</sw:batch-operations>
			
			<!-- Device command routing -->
			<sw:command-routing>
				<sw:specification-mapping-router defaultDestination="default"/>
			</sw:command-routing>
			
			<!-- Outbound command destinations -->
			<sw:command-destinations>

				<!-- Delivers commands via MQTT -->
				<sw:mqtt-command-destination destinationId="default"
					hostname="localhost" port="1883">
					<sw:protobuf-command-encoder/>
					<sw:hardware-id-topic-extractor commandTopicExpr="SiteWhere/commands/%s"
						systemTopicExpr="SiteWhere/system/%s"/>
				</sw:mqtt-command-destination>

			</sw:command-destinations>

		</sw:provisioning>
		
		<!-- ############################ -->
		<!-- # INBOUND PROCESSING CHAIN # -->
		<!-- ############################ -->
		<sw:inbound-processing-chain>
			
			<!-- Use custom processor to enable device assignment state to be tracked -->
			<sw:inbound-event-processor ref="statefulEventProcessor"/>

		</sw:inbound-processing-chain>
		
		<!-- ############################# -->
		<!-- # OUTBOUND PROCESSING CHAIN # -->
		<!-- ############################# -->
		<sw:outbound-processing-chain>
		
			<!-- Routes commands for provisioning -->
			<sw:provisioning-event-processor numThreads="10"/>

		</sw:outbound-processing-chain>
		
		<!-- #################### -->
		<!-- # ASSET MANAGEMENT # -->
		<!-- #################### -->
		<sw:asset-management>

			<sw:filesystem-device-asset-module/>
			<sw:filesystem-hardware-asset-module/>
			<sw:filesystem-person-asset-module/>
			<sw:filesystem-location-asset-module/>
			
			<!-- Additional asset types for air traffic -->
			<sw:filesystem-device-asset-module filename="airtraffic-devices.xml"
				moduleId="at-devices" moduleName="Air Traffic Devices"/>
			<sw:filesystem-hardware-asset-module filename="airtraffic-planes.xml"
				moduleId="at-planes" moduleName="Air Traffic Planes"/>

		</sw:asset-management>
		
		<!-- ############################# -->
		<!-- # EXTERNAL SEARCH PROVIDERS # -->
		<!-- ############################# -->
		<sw:search-providers/>

	</sw:configuration>

	<!-- Bean that creates stateful event storage processor -->
	<bean id="statefulEventProcessor" class="com.sitewhere.examples.airtraffic.StateUpdateEventStorageProcessor"/>
           
	<!-- Import beans specific to the given edition -->
	<import resource="sitewhere-edition-${sitewhere.edition}.xml"/>

</beans>